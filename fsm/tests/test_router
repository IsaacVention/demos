import asyncio
import unittest
from fastapi import FastAPI
from fastapi.testclient import TestClient
from core import StateMachine, BaseStates
from router import build_fsm_router
from defs import StateGroup, State, Trigger


class RunningStates(StateGroup):
    idle: State = State()
    active: State = State()


class TestStates:
    running = RunningStates()


class Triggers:
    activate = Trigger("activate")
    start = Trigger("start")
    reset = Trigger("reset")


TRANSITIONS = [
    Triggers.activate.transition(TestStates.running.idle, TestStates.running.active),
    Triggers.start.transition(BaseStates.READY.value, TestStates.running.idle),
    Triggers.reset.transition("*", BaseStates.READY.value),
]


class RouterTestCase(unittest.TestCase):
    def setUp(self) -> None:
        self.machine = StateMachine(states=TestStates, transitions=TRANSITIONS)

        async def async_activate() -> None:
            await asyncio.sleep(0.01)
            self.machine.trigger(Triggers.activate.name)

        self.machine.activate = async_activate  # override with coroutine
        self.machine.start()
        app = FastAPI()
        app.include_router(build_fsm_router(self.machine))
        self.client = TestClient(app)

    def test_get_state(self) -> None:
        """Returns current and last known state."""
        resp = self.client.get("/state")
        self.assertEqual(resp.status_code, 200)
        data = resp.json()
        self.assertIn("state", data)
        self.assertIn("last_state", data)

    def test_get_history(self) -> None:
        """Returns transition history."""
        self.client.post("/activate")
        resp = self.client.get("/history")
        self.assertEqual(resp.status_code, 200)
        data = resp.json()
        self.assertIn("history", data)
        self.assertIsInstance(data["history"], list)

    def test_trigger_valid(self) -> None:
        """Executes valid trigger and updates FSM state and history."""
        resp = self.client.post("/activate")
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.json()["result"], "activate")

        self.assertEqual(self.machine.state, str(TestStates.running.active))

        history_states = [h["state"] for h in self.machine.history]
        self.assertIn(str(TestStates.running.active), history_states)

    def test_trigger_invalid(self) -> None:
        """Rejects invalid trigger based on current state."""
        self.machine.trigger("reset")
        resp = self.client.post("/activate")
        self.assertEqual(resp.status_code, 409)
        self.assertIn("Trigger 'activate' not allowed", resp.json()["detail"])
        self.assertEqual(self.machine.state, str(BaseStates.READY.value))

    def test_diagram_svg(self) -> None:
        """Returns the state machine diagram as SVG."""
        resp = self.client.get("/diagram.svg")
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.headers["content-type"], "image/svg+xml")

    def test_custom_trigger_list(self) -> None:
        """Supports custom subset of triggers."""
        app = FastAPI()
        app.include_router(build_fsm_router(self.machine, triggers=[Triggers.activate]))
        client = TestClient(app)

        resp = client.post("/activate")
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.json()["result"], "activate")

    def test_trigger_with_coroutine(self) -> None:
        """Handles coroutine trigger methods."""
        resp = self.client.post("/activate")
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(resp.json()["result"], "activate")
        self.assertEqual(self.machine.state, str(TestStates.running.active))
